name: Build & Release Rust Binaries

on:
  push:
    tags:
      - 'v*'     # create a GitHub Release when pushing a tag
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ---- macOS ----
          - os: macos-latest
            target: x86_64-apple-darwin
            kind: native
            ext: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            kind: native
            ext: ""
          # ---- Windows (MSVC) ----
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            kind: native
            ext: ".exe"
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            kind: native
            ext: ".exe"
          # ---- Linux glibc via zig (no system toolchains required) ----
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            kind: zig
            ext: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            kind: zig
            ext: ""
          # ---- Linux musl static via zig (very portable) ----
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            kind: zig
            ext: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            kind: zig
            ext: ""

    env:
      CARGO_TERM_COLOR: always
      APP_NAME: dist   # <-- change to your crate’s binary name

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        # dtolnay’s action makes target adding super easy
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      # ---- Linux cross: install zig + cargo-zigbuild when needed ----
      - name: Install zig (Linux only if kind=zig)
        if: runner.os == 'Linux' && matrix.kind == 'zig'
        uses: mlugg/setup-zig@v1
        with:
          version: 0.12.1

      - name: Install cargo-zigbuild (Linux only if kind=zig)
        if: runner.os == 'Linux' && matrix.kind == 'zig'
        run: cargo install cargo-zigbuild --locked

      # ---- Build step (native vs zigbuild) ----
      - name: Build (native)
        if: matrix.kind == 'native'
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}

      - name: Build (zig)
        if: matrix.kind == 'zig'
        run: |
          rustup target add ${{ matrix.target }}
          cargo zigbuild --release --target ${{ matrix.target }}

      # ---- Strip (best effort, platform-specific) ----
      - name: Strip binary (Unix)
        if: runner.os != 'Windows'
        run: |
          BIN="target/${{ matrix.target }}/release/${APP_NAME}"
          if command -v strip >/dev/null 2>&1; then strip "$BIN" || true; fi

      - name: Prepare artifact
        shell: bash
        run: |
          OUTDIR="dist"
          mkdir -p "$OUTDIR"
          BIN="target/${{ matrix.target }}/release/${APP_NAME}${{ matrix.ext }}"
          # Package name: app-<target>[-<tag>]
          TAG="${GITHUB_REF_NAME:-dev}"
          PKG="${APP_NAME}-${{ matrix.target }}-${TAG}"
          if [ "${{ runner.os }}" = "Windows" ]; then
            ARCHIVE="${OUTDIR}/${PKG}.zip"
            FILES=("$BIN")
            for extra in LICENSE README.md; do
              if [ -f "$extra" ]; then
                FILES+=("$extra")
              fi
            done
            rm -f "$ARCHIVE"
            if ! 7z a "$ARCHIVE" "${FILES[@]}" >/dev/null; then
              PS_FILES=$(printf "'%s'," "${FILES[@]}")
              powershell -Command "$files = @(${PS_FILES%,}); Compress-Archive -Path $files -DestinationPath '${ARCHIVE}' -Force"
            fi
          else
            PKGDIR="$(mktemp -d)"
            cp "$BIN" "$PKGDIR/"
            if [ -f LICENSE ]; then cp LICENSE "$PKGDIR/"; fi
            if [ -f README.md ]; then cp README.md "$PKGDIR/"; fi
            tar -czf "${OUTDIR}/${PKG}.tar.gz" -C "$PKGDIR" .
            rm -rf "$PKGDIR"
          fi
          echo "PKG_NAME=${PKG}" >> $GITHUB_ENV

      - name: Upload artifact (CI run)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}
          path: dist/*

  release:
    name: attach to GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*
